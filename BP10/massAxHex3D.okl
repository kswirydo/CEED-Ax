#if p_gjNq==8 || p_gjNq==16
#define p_gjPad 1
#else
#define p_gjPad 0
#endif

#if p_Nq==8 || p_Nq==16
#define p_gllPad 1
#else
#define p_gllPad 0
#endif

#define p_Nq2 (p_Nq*p_Nq)
#define p_gjNp (p_gjNq*p_gjNq*p_gjNq)
#define p_gjNq2 (p_gjNq*p_gjNq)

#define p_GWJID 0

// kernel 1: reference kernel; no unrolling anywhere and no padding, no const, no compiler variables

kernel void massPartialAxHex3D_Ref1(int Nelements,
    datafloat * gjGeo,
    datafloat *  gjI,
    datafloat *  q,
    datafloat *  Mq,
    datafloat * qtmp,
    datafloat * qtmp2,
    datafloat * qtmp3){

  for(int e=0;e<Nelements;++e;outer0){
   
 shared datafloat s_I[p_gjNq][p_gjNq];
    
for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        for(int c=0;c<p_gjNq;++c){

          
qtmp[e*p_gjNp+c*p_gjNq2+b*p_gjNq+a] =0.0f;
          qtmp2[e*p_gjNp+c*p_gjNq2+b*p_gjNq+a] =0.0f;
          qtmp3[e*p_gjNp+c*p_gjNq2+b*p_gjNq+a] =0.0f;

          Mq[e*p_gjNp+c*p_gjNq2+b*p_gjNq+a] =0.0f;
        }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_gjNq;++k){
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){

            datafloat tmp = 0;

            for(int c=0;c<p_Nq;++c){
              tmp += s_I[k][c]*q[e*p_Np+c*p_Nq2+b*p_Nq+a];
            }

            qtmp3[e*p_gjNp+k*p_gjNq2+b*p_gjNq+a] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          if(b<p_Nq){

            datafloat tmp = 0;

            for(int a=0;a<p_Nq;++a){
              tmp += s_I[i][a]*qtmp3[e*p_gjNp+k*p_gjNq2+b*p_gjNq+a];
            }

            qtmp2[e*p_gjNp+k*p_gjNq2+b*p_gjNq+i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];
          datafloat tmp = 0;

          for(int b=0;b<p_Nq;++b){
            tmp += s_I[j][b]*qtmp2[e*p_gjNp+k*p_gjNq2+b*p_gjNq+i];
          }

          qtmp[e*p_gjNp+k*p_gjNq2+j*p_gjNq+i]= r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*qtmp[e*p_gjNp+k*p_gjNq2+j*p_gjNq+i];
            }

            qtmp3[e*p_gjNp+k*p_gjNq2+b*p_gjNq+i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq){

            datafloat tmp = 0;

            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*qtmp3[e*p_gjNp+k*p_gjNq2+b*p_gjNq+i];
            }

            for(int c=0;c<p_Nq;++c){
              const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
              Mq[id] += s_I[k][c]*tmp;           
            }
          }
        }
      }
    }//k

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          for(int c=0;c<p_Nq;++c){
            const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
          }
        }
      }
    }
  }
}

//Kernel 2 

kernel void massPartialAxHex3D_Ref2(int Nelements,
    datafloat * gjGeo,
    datafloat *  gjI,
    datafloat *  q,
    datafloat *  Mq){

  for(int e=0;e<Nelements;++e;outer0){

    int Nq = p_gjNq-1;
    int Nq2 = Nq*Nq;
    int Np = Nq*Nq2;

    shared datafloat s_I[p_gjNq][p_gjNq];
    shared datafloat s_q1[p_gjNq][p_gjNq];
    shared datafloat s_q2[p_gjNq][p_gjNq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<Nq)
          s_I[b][a] = gjI[a+Nq*b];

        if(a<Nq && b<Nq){
          for(int c=0;c<Nq;++c){
            const int id = e*Np + c*Nq2 + b*Nq + a;
            Mq[id] = 0.0;
          }
        }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_gjNq;++k){
      barrier(localMemFence);
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<Nq && b<Nq){

            datafloat tmp = 0;

            for(int c=0;c<p_Nq;++c){
              tmp += s_I[k][c]*q[e*Np+c*Nq2+b*Nq+a];
            }

            s_q1[b][a] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<Nq){

            datafloat tmp = 0;

            for(int a=0;a<p_Nq;++a){
              tmp += s_I[i][a]*s_q1[b][a];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];
          datafloat tmp = 0;

          for(int b=0;b<Nq;++b){
            tmp += s_I[j][b]*s_q2[b][i];
          }

          s_q1[j][i] = r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<Nq){

            datafloat tmp = 0;

            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*s_q1[j][i];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<Nq && b<Nq){

            datafloat tmp = 0;

            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*s_q2[b][i];
            }

            for(int c=0;c<Nq;++c){
              const int id = e*Np + c*Nq2 + b*Nq + a;
              Mq[id] += s_I[k][c]*tmp;
            }
          }
        }
      }
    }
  }
}

// Kernel 3

kernel void massPartialAxHex3D_Ref3(int Nelements,
    datafloat * gjGeo,
    datafloat *  gjI,
    datafloat *  q,
    datafloat *  Mq){

  for(int e=0;e<Nelements;++e;outer0){

    int Nq = p_gjNq-1;
    int Nq2 = Nq*p_Nq;
    int Np = Nq*p_Nq2;

    shared datafloat s_I[p_gjNq][p_gjNq];
    shared datafloat s_q1[p_gjNq][p_gjNq];
    shared datafloat s_q2[p_gjNq][p_gjNq];

    exclusive datafloat r_q[p_gjNq];
    exclusive datafloat r_Mq[p_gjNq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        for(int c=0;c<p_Nq;++c){
          r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
        }

        for(int c=0;c<p_Nq;++c){

          if(a<p_Nq && b<p_Nq){
            r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
          }
          else {
            r_Mq[c] = 0.0f;
          }
        }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){
        if(a<p_Nq && b<p_Nq){
          for(int k=0;k<p_gjNq;++k){

            datafloat tmp = 0;

            for(int c=0;c<p_Nq;++c){
              tmp += s_I[k][c]*r_Mq[c];
            }

            r_q[k] = tmp;
          }

          for(int c=0;c<p_Nq;++c){
            r_Mq[c] = 0;
          }
        }
      }
    }

    for(int k=0;k<p_gjNq;++k){

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq)
            s_q1[b][a] = r_q[k];
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            for(int a=0;a<p_Nq;++a){
              tmp += s_I[i][a]*s_q1[b][a];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];
          datafloat tmp = 0;

          for(int b=0;b<p_Nq;++b){
            tmp += s_I[j][b]*s_q2[b][i];
          }

          s_q1[j][i] = r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*s_q1[j][i];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq){

            datafloat tmp = 0;

            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*s_q2[b][i];
            }

            for(int c=0;c<p_Nq;++c){
              r_Mq[c] += s_I[k][c]*tmp;
            }
          }
        }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          for(int c=0;c<p_Nq;++c){
            const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
            Mq[id] = r_Mq[c];
          }
        }
      }
    }
  }
}

//Kernel 6

kernel void massPartialAxHex3D_Ref6(const int Nelements,
    const datafloat * gjGeo,
    const datafloat *  gjI,
    const datafloat *  q,
    datafloat *  Mq){

  for(int e=0;e<Nelements;++e;outer0){

    shared datafloat s_I[p_gjNq][p_Nq+p_gllPad];
    shared datafloat s_q1[p_gjNq][p_gjNq+p_gjPad];
    shared datafloat s_q2[p_gjNq][p_gjNq+p_gjPad];

    exclusive datafloat r_q[p_gjNq];
    exclusive datafloat r_Mq[p_Nq];
    // prefetch D and I matrices and zero register storage
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        occaUnroll(p_Nq)
          for(int c=0;c<p_Nq;++c){

            if(a<p_Nq && b<p_Nq){
              r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
            }
            else {
              r_Mq[c] = 0.0f;
            }
          }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_gjNq)
            for(int k=0;k<p_gjNq;++k){

              datafloat tmp = 0;

              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  tmp += s_I[k][c]*r_Mq[c];
                }

              r_q[k] = tmp;
            }

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c){
              r_Mq[c] = 0;
            }
        }
      }
    }

    occaUnroll(p_gjNq)
      for(int k=0;k<p_gjNq;++k){

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){

            if(a<p_Nq && b<p_Nq)
              s_q1[b][a] = r_q[k];
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){

            if(b<p_Nq){

              datafloat tmp = 0;

              occaUnroll(p_Nq)
                for(int a=0;a<p_Nq;++a){
                  tmp += s_I[i][a]*s_q1[b][a];
                }

              s_q2[b][i] = tmp;
            }
          }
        }

        barrier(localMemFence);

        for(int j=0;j<p_gjNq;++j;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){

            const datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

            datafloat tmp = 0;

            occaUnroll(p_Nq)
              for(int b=0;b<p_Nq;++b){
                tmp += s_I[j][b]*s_q2[b][i];
              }

            s_q1[j][i] = r_GwJ*tmp;
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){

            if(b<p_Nq){

              datafloat tmp = 0;

              occaUnroll(p_gjNq)
                for(int j=0;j<p_gjNq;++j){
                  tmp += s_I[j][b]*s_q1[j][i];
                }

              s_q2[b][i] = tmp;
            }
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){

            if(a<p_Nq && b<p_Nq){

              datafloat tmp = 0;

              occaUnroll(p_gjNq)
                for(int i=0;i<p_gjNq;++i){
                  tmp += s_I[i][a]*s_q2[b][i];
                }

              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  r_Mq[c] += s_I[k][c]*tmp;
                }
            }
          }
        }
      }

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c){
              const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
              Mq[id] = r_Mq[c];
            }
        }
      }
    }
  }
}

//Kernel 7 

kernel void massPartialAxHex3D_Ref7(const int Nelements,
    const datafloat * restrict gjGeo,
    const datafloat * restrict gjI,
    const datafloat * restrict q,
    datafloat * restrict Mq){

  for(int e=0;e<Nelements;++e;outer0){

    shared datafloat s_I[p_gjNq][p_Nq+p_gllPad];
    volatile shared datafloat s_q[p_gjNq][p_gjNq][p_gjNq+p_gjPad];

    exclusive datafloat r_q[p_gjNq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c)
              s_q[c][b][a] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
        }
      }
    }

    barrier(localMemFence);

    // transform in b
    for(int c=0;c<p_gjNq;++c;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && c<p_Nq){

          occaUnroll(p_Nq)
            for(int b=0;b<p_Nq;++b)
              r_q[b] = s_q[c][b][a];

          occaUnroll(p_gjNq)
            for(int j=0;j<p_gjNq;++j){

              datafloat tmp = 0;

              occaUnroll(p_Nq)
                for(int b=0;b<p_Nq;++b)
                  tmp += s_I[j][b]*r_q[b];

              s_q[c][j][a] = tmp;
            }
        }
      }
    }

    barrier(localMemFence);

    // transform in a
    for(int c=0;c<p_gjNq;++c;inner1){
      for(int j=0;j<p_gjNq;++j;inner0){

        if(c<p_Nq){

          occaUnroll(p_Nq)
            for(int a=0;a<p_Nq;++a)
              r_q[a] = s_q[c][j][a];

          occaUnroll(p_gjNq)
            for(int i=0;i<p_gjNq;++i){

              datafloat tmp = 0;

              occaUnroll(p_Nq)
                for(int a=0;a<p_Nq;++a)
                  tmp += s_I[i][a]*r_q[a];

              s_q[c][j][i] = tmp; 
            }
        }
      }
    }

    barrier(localMemFence);

    //transform in c    
    for(int j=0;j<p_gjNq;++j;inner1){
      for(int i=0;i<p_gjNq;++i;inner0){

        occaUnroll(p_Nq)
          for(int c=0;c<p_Nq;++c)

            r_q[c] = s_q[c][j][i];

        occaUnroll(p_gjNq)
          for(int k=0;k<p_gjNq;++k){

            const int id = p_Ngeo*e*p_gjNp
              +k*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;

            const datafloat r_GwJ = gjGeo[id];

            datafloat tmp = 0;

            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c)
                tmp += s_I[k][c]*r_q[c];

            s_q[k][j][i] = r_GwJ*tmp; // ok since only this thread
          }
      }
    }

    barrier(localMemFence);

    // transform back in b
    for(int k=0;k<p_gjNq;++k;inner1){
      for(int i=0;i<p_gjNq;++i;inner0){

        occaUnroll(p_gjNq)
          for(int j=0;j<p_gjNq;++j)
            r_q[j] = s_q[k][j][i];

        occaUnroll(p_Nq)
          for(int b=0;b<p_Nq;++b){

            datafloat tmp = 0;

            occaUnroll(p_gjNq)
              for(int j=0;j<p_gjNq;++j)
                tmp += s_I[j][b]*r_q[j];

            s_q[k][b][i] = tmp;
          }
      }
    }

    barrier(localMemFence);

    // transform back in a
    for(int k=0;k<p_gjNq;++k;inner1){
      for(int b=0;b<p_gjNq;++b;inner0){

        if(b<p_Nq){

          occaUnroll(p_gjNq)
            for(int i=0;i<p_gjNq;++i)
              r_q[i] = s_q[k][b][i];

          occaUnroll(p_Nq)
            for(int a=0;a<p_Nq;++a){

              datafloat tmp = 0;

              occaUnroll(p_gjNq)
                for(int i=0;i<p_gjNq;++i)
                  tmp += s_I[i][a]*r_q[i];

              s_q[k][b][a] = tmp; // ok since only this thread
            }
        }
      }
    }

    barrier(localMemFence);

    // transform back in c
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_gjNq)
            for(int k=0;k<p_gjNq;++k)
              r_q[k] = s_q[k][b][a];

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c){
              datafloat tmp = 0;

              occaUnroll(p_gjNq)
                for(int k=0;k<p_gjNq;++k)
                  tmp += s_I[k][c]*r_q[k];

              Mq[e*p_Np+c*p_Nq2+b*p_Nq+a] = tmp;
            }
        }
      }
    }
  }
}

//Kernel 8

kernel void massPartialAxHex3D_Ref8(const int Nelements,
    const datafloat * restrict gjGeo,
    const datafloat * restrict gjI,
    const datafloat * restrict q,
    datafloat * restrict Mq){

  for(int e=0;e<Nelements;++e;outer0){

    shared datafloat s_I[p_gjNq][p_Nq+p_gllPad];
    volatile shared datafloat s_q[p_gjNq][p_gjNq][p_gjNq+p_gjPad];

    exclusive datafloat r_q[p_gjNq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c)
              s_q[c][b][a] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
        }
      }
    }

    barrier(localMemFence);

    // transform in b
    for(int c=0;c<p_gjNq;++c;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && c<p_Nq){

          occaUnroll(p_Nq)
            for(int b=0;b<p_Nq;++b)
              r_q[b] = s_q[c][b][a];

          occaUnroll(p_halfI)
            for(int j=0;j<p_halfI;++j){

              datafloat tmp = 0;
              datafloat tmp2 = 0;

              occaUnroll(p_Nq)
                for(int b=0;b<p_Nq;++b){

                  datafloat tmpI = s_I[j][b];

                  tmp  += tmpI*r_q[b];
                  tmp2 += tmpI*r_q[p_Nq-1-b];
                }

              s_q[c][j][a] = tmp; // ok since only this thread
              s_q[c][p_gjNq-1-j][a] = tmp2;
            }
        }
      }
    }

    barrier(localMemFence);

    // transform in a
    for(int c=0;c<p_gjNq;++c;inner1){
      for(int j=0;j<p_gjNq;++j;inner0){

        if(c<p_Nq){

          occaUnroll(p_Nq)
            for(int a=0;a<p_Nq;++a)
              r_q[a] = s_q[c][j][a];

          occaUnroll(p_halfI)
            for(int i=0;i<p_halfI;++i){

              datafloat tmp = 0;
              datafloat tmp2 = 0;

              occaUnroll(p_Nq)
                for(int a=0;a<p_Nq;++a){

                  datafloat tmpI = s_I[i][a];

                  tmp += tmpI*r_q[a];
                  tmp2+=tmpI*r_q[p_Nq-1-a];
                }

              s_q[c][j][i] = tmp;
              s_q[c][j][p_gjNq-1-i] = tmp2;
            }
        }
      }
    }

    barrier(localMemFence);

    // transform in c
    for(int j=0;j<p_gjNq;++j;inner1){
      for(int i=0;i<p_gjNq;++i;inner0){

        occaUnroll(p_Nq)
          for(int c=0;c<p_Nq;++c)
            r_q[c] = s_q[c][j][i];

        occaUnroll(p_halfI)
          for(int k=0;k<p_halfI;++k){

            const int id = p_Ngeo*e*p_gjNp
              +k*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;

            const int id2 = p_Ngeo*e*p_gjNp
              +(p_gjNq-1-k)*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;

            const datafloat r_GwJ = gjGeo[id];
            const datafloat r_GwJ2 = gjGeo[id2];

            datafloat tmp = 0;
            datafloat tmp2 = 0;

            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c){

                datafloat tmpI = s_I[k][c];

                tmp += tmpI*r_q[c];
                tmp2 += tmpI*r_q[p_Nq-1-c];
              }

            s_q[k][j][i] = r_GwJ*tmp; // ok since only this thread
            s_q[p_gjNq-k-1][j][i] = r_GwJ2*tmp2;
          }
      }
    }
    barrier(localMemFence);
    // transform back in b
    for(int k=0;k<p_gjNq;++k;inner1){
      for(int i=0;i<p_gjNq;++i;inner0){

        occaUnroll(p_gjNq)
          for(int j=0;j<p_gjNq;++j)
            r_q[j] = s_q[k][j][i];

        occaUnroll(p_halfI)
          for(int b=0;b<p_halfI;++b){
            datafloat tmp = 0;
            datafloat tmp2 = 0;

            occaUnroll(p_gjNq)
              for(int j=0;j<p_gjNq;++j){

                datafloat tmpI = s_I[j][b];

                tmp += tmpI*r_q[j] ;
                tmp2 += tmpI*r_q[p_gjNq-1-j];
              }

            s_q[k][b][i] = tmp; // ok since only this thread
            s_q[k][p_Nq-1-b][i] = tmp2;
          }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_gjNq;++k;inner1){
      for(int b=0;b<p_gjNq;++b;inner0){

        if(b<p_Nq){

          occaUnroll(p_gjNq)
            for(int i=0;i<p_gjNq;++i)
              r_q[i] = s_q[k][b][i];

          occaUnroll(p_halfI)
            for(int a=0;a<p_halfI;++a){

              datafloat tmp = 0;
              datafloat tmp2 = 0;

              occaUnroll(p_gjNq)
                for(int i=0;i<p_gjNq;++i){

                  datafloat tmpI = s_I[i][a];

                  tmp += tmpI*r_q[i] ;
                  tmp2 += tmpI*r_q[p_gjNq-1-i];
                }

              s_q[k][b][a] = tmp; // ok since only this thread
              s_q[k][b][p_Nq-1-a] = tmp2;
            }
        }
      }
    }

    barrier(localMemFence);

    // transform back in c
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_gjNq)
            for(int k=0;k<p_gjNq;++k)
              r_q[k] = s_q[k][b][a];

          occaUnroll(p_halfI)
            for(int c=0;c<p_halfI;++c){

              datafloat tmp = 0;
              datafloat tmp2 = 0;

              occaUnroll(p_gjNq)
                for(int k=0;k<p_gjNq;++k){

                  datafloat tmpI = s_I[k][c];

                  tmp += tmpI*r_q[k] ;
                  tmp2 += tmpI*r_q[p_gjNq-1-k];
                }

              Mq[e*p_Np+c*p_Nq2+b*p_Nq+a] = tmp;
              Mq[e*p_Np+(p_Nq-1-c)*p_Nq2+b*p_Nq+a] = tmp2;
            }
        }
      }
    }
  }
}

//Kernel 5

kernel void massPartialAxHex3D_Ref5(const int Nelements,
    const datafloat * restrict gjGeo,
    const datafloat * restrict gjI,
    const datafloat * restrict q,
    datafloat * restrict Mq){

  for(int e=0;e<Nelements;++e;outer0){

    shared datafloat s_I[p_gjNq][p_Nq+p_gllPad];
    shared datafloat s_q1[p_gjNq][p_gjNq+p_gjPad];
    shared datafloat s_q2[p_gjNq][p_gjNq+p_gjPad];

    exclusive datafloat r_q[p_gjNq];
    exclusive datafloat r_Mq[p_Nq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        occaUnroll(p_Nq)
          for(int c=0;c<p_Nq;++c){

            if(a<p_Nq && b<p_Nq){
              r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
            }
            else {
              r_Mq[c] = 0.0f;
            }
          }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_gjNq)
            for(int k=0;k<p_gjNq;++k){

              datafloat tmp = 0;

              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  tmp += s_I[k][c]*r_Mq[c];
                }

              r_q[k] = tmp;
            }

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c){
              r_Mq[c] = 0;
            }
        }
      }
    }

    for(int k=0;k<p_gjNq;++k){

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq)
            s_q1[b][a] = r_q[k];
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            occaUnroll(p_Nq)
              for(int a=0;a<p_Nq;++a){
                tmp += s_I[i][a]*s_q1[b][a];
              }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          const datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

          datafloat tmp = 0;

          occaUnroll(p_Nq)
            for(int b=0;b<p_Nq;++b){
              tmp += s_I[j][b]*s_q2[b][i];
            }

          s_q1[j][i] = r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          if(b<p_Nq){

            datafloat tmp = 0;

            occaUnroll(p_gjNq)
              for(int j=0;j<p_gjNq;++j){
                tmp += s_I[j][b]*s_q1[j][i];
              }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq){

            datafloat tmp = 0;

            occaUnroll(p_gjNq)
              for(int i=0;i<p_gjNq;++i){
                tmp += s_I[i][a]*s_q2[b][i];
              }

            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c){
                r_Mq[c] += s_I[k][c]*tmp;
              }
          }
        }
      }
    }

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c){

              const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
              Mq[id] = r_Mq[c];
            }
        }
      }
    }
  }
}

//Kernel 4

kernel void massPartialAxHex3D_Ref4(const int Nelements,
    const datafloat * restrict gjGeo,
    const datafloat * restrict gjI,
    const datafloat * restrict q,
    datafloat * restrict Mq){

  for(int e=0;e<Nelements;++e;outer0){

    int Nq = p_gjNq-1;
    int Nq2 = Nq*p_Nq;
    int Np = Nq*p_Nq2;

    shared datafloat s_I[p_gjNq][p_gjNq];
    shared datafloat s_q1[p_gjNq][p_gjNq];
    shared datafloat s_q2[p_gjNq][p_gjNq];

    exclusive datafloat r_q[p_gjNq];
    exclusive datafloat r_Mq[p_gjNq];

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        for(int c=0;c<p_Nq;++c){
          r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
        }

        for(int c=0;c<p_Nq;++c){
          if(a<p_Nq && b<p_Nq){
            r_Mq[c] = q[e*p_Np+c*p_Nq2+b*p_Nq+a];
          }
          else {
            r_Mq[c] = 0.0f;
          }
        }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          for(int k=0;k<p_gjNq;++k){

            datafloat tmp = 0;

            for(int c=0;c<p_Nq;++c){
              tmp += s_I[k][c]*r_Mq[c];
            }

            r_q[k] = tmp;
          }

          for(int c=0;c<p_Nq;++c){
            r_Mq[c] = 0;
          }
        }
      }
    }

    for(int k=0;k<p_gjNq;++k){

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq)
            s_q1[b][a] = r_q[k];
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            for(int a=0;a<p_Nq;++a){
              tmp += s_I[i][a]*s_q1[b][a];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          datafloat r_GwJ = gjGeo[p_Ngeo*e*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];
          datafloat tmp = 0;

          for(int b=0;b<p_Nq;++b){
            tmp += s_I[j][b]*s_q2[b][i];
          }

          s_q1[j][i] = r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          if(b<p_Nq){

            datafloat tmp = 0;

            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*s_q1[j][i];
            }

            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<p_Nq && b<p_Nq){

            datafloat tmp = 0;

            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*s_q2[b][i];
            }

            for(int c=0;c<p_Nq;++c){
              r_Mq[c] += s_I[k][c]*tmp;
            }
          }
        }
      }
    }

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        if(a<p_Nq && b<p_Nq){

          for(int c=0;c<p_Nq;++c){

          const int id = e*p_Np + c*p_Nq2 + b*p_Nq + a;
            Mq[id] = r_Mq[c];
          }
        }
      }
    }
  }
}
