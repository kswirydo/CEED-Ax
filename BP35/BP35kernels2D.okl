#if p_Ngll==8 || p_Ngll==16
#define p_gllPad 1
#else
#define p_gllPad 0
#endif

#define p_G00ID 0
#define p_G01ID 1
#define p_G02ID 2
#define p_G11ID 3
#define p_G12ID 4
#define p_G22ID 5
#define p_GWJID 6

//baseline - as unoptimized as possible

kernel void ellipticAxHex3D_Ref2D1(int Nelements,
    datafloat * ggeo,
    datafloat *  D,
    datafloat lambda,
    datafloat *  q,
    datafloat *  Aq,
    datafloat * Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    //	shared datafloat s_tmpr[p_Ngll][p_Ngll][p_Ngll];
    shared datafloat s_tmps[p_Ngll][p_Ngll][p_Ngll];

    //	shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt[p_Ngll], r_tmpt[p_Ngll];

    //		exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        for (int k=0; k<p_Ngll; k++){

          //		s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];
          Aq[base + k*p_Ngll*p_Ngll] = 0.f;
        }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);



    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {
          datafloat qtk = 0.f;
          int emap = e;
          int base = i + j*p_Ngll + emap*p_Np;
          for(int n=0; n<p_Ngll; ++n) {
            qtk += s_D[k][n]*q[base + n*p_Ngll*p_Ngll];
            //   qtk += s_D[j][n]*s_q[n][j][i];
          }
          r_qt[k] = qtk;
          //	s_Aq[k][j][i] =qtk;
        }
      }
    }

    barrier(localMemFence);

    // process k-slice (first r- and s-derivatives)
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {
          int emap = e;
          int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

          datafloat G00 = ggeo[base+p_G00ID*p_Np];
          datafloat G01 = ggeo[base+p_G01ID*p_Np];
          datafloat G02 = ggeo[base+p_G02ID*p_Np];
          datafloat G11 = ggeo[base+p_G11ID*p_Np];
          datafloat G12 = ggeo[base+p_G12ID*p_Np];
          datafloat G22 = ggeo[base+p_G22ID*p_Np];
          datafloat GwJ = ggeo[base+p_GWJID*p_Np];


          //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
          datafloat qr = 0.f, qs = 0.f;
          for(int n=0; n<p_Ngll; ++n) {

            qr += s_D[i][n]*q[n + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np];
            qs += s_D[j][n]*q[i + n*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
          }
          base = i + j*p_Ngll + emap*p_Np;
          // assumes w*J built into G entries
          //	s_tmpr[k][j][i] = G00*qr + G01*qs + G02*r_qt[k];

          Aqtemp[base + k*p_Ngll*p_Ngll] = G00*qr + G01*qs + G02*r_qt[k];
          s_tmps[k][j][i] = G01*qr + G11*qs + G12*r_qt[k];
          r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt[k];


          //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




          Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
          for(int n=0; n<p_Ngll; ++n) {
            //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
            Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
          }
        }
      }
    }


    barrier(localMemFence);

    // second derivatives

    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {

          int emap = e;

          int base = i + j*p_Ngll + emap*p_Np;
          datafloat Aq1 = 0.0f, Aq2 = 0.0f;

          for(int n=0; n<p_Ngll; ++n) {
            Aq1 += s_D[n][i]*Aqtemp[k*p_Ngll*p_Ngll + j*p_Ngll + emap*p_Np +n];
            //s_tmpr[k][j][n];
            Aq2 += s_D[n][j]*s_tmps[k][n][i];
          }

          Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

          //		s_Aq[k][j][i] +=  Aq1 + Aq2;

        }
      }
    }

  }

} //e1c

// Ref0 + const variables
kernel void ellipticAxHex3D_Ref2D3(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    shared datafloat s_tmps[p_Ngll][p_Ngll][p_Ngll];
    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt[p_Ngll], r_tmpt[p_Ngll];



    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        for (int k=0; k<p_Ngll; k++){



          Aq[base + k*p_Ngll*p_Ngll] = 0.f;
        }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);



    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {
          datafloat qtk = 0.f;
          int emap = e;
          int base = i + j*p_Ngll + emap*p_Np;
          for(int n=0; n<p_Ngll; ++n) {
            qtk += s_D[k][n]*q[base + n*p_Ngll*p_Ngll];
            //   qtk += s_D[j][n]*s_q[n][j][i];
          }
          r_qt[k] = qtk;
          //	s_Aq[k][j][i] =qtk;
        }
      }
    }

    barrier(localMemFence);

    // process k-slice (first r- and s-derivatives)
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {
          int emap = e;
          int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

          datafloat G00 = ggeo[base+p_G00ID*p_Np];
          datafloat G01 = ggeo[base+p_G01ID*p_Np];
          datafloat G02 = ggeo[base+p_G02ID*p_Np];
          datafloat G11 = ggeo[base+p_G11ID*p_Np];
          datafloat G12 = ggeo[base+p_G12ID*p_Np];
          datafloat G22 = ggeo[base+p_G22ID*p_Np];
          datafloat GwJ = ggeo[base+p_GWJID*p_Np];


          //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
          datafloat qr = 0.f, qs = 0.f;
          for(int n=0; n<p_Ngll; ++n) {

            qr += s_D[i][n]*q[n + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np];
            qs += s_D[j][n]*q[i + n*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
          }
          base = i + j*p_Ngll + emap*p_Np;
          // assumes w*J built into G entries
          //	s_tmpr[k][j][i] = G00*qr + G01*qs + G02*r_qt[k];

          Aqtemp[base + k*p_Ngll*p_Ngll] = G00*qr + G01*qs + G02*r_qt[k];
          s_tmps[k][j][i] = G01*qr + G11*qs + G12*r_qt[k];
          r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt[k];


          //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




          Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
          for(int n=0; n<p_Ngll; ++n) {
            //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
            Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
          }
        }
      }
    }


    barrier(localMemFence);

    // second derivatives

    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {

          int emap = e;

          int base = i + j*p_Ngll + emap*p_Np;
          datafloat Aq1 = 0.0f, Aq2 = 0.0f;

          for(int n=0; n<p_Ngll; ++n) {
            Aq1 += s_D[n][i]*Aqtemp[k*p_Ngll*p_Ngll + j*p_Ngll + emap*p_Np +n];
            //s_tmpr[k][j][n];
            Aq2 += s_D[n][j]*s_tmps[k][n][i];
          }

          Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

          //		s_Aq[k][j][i] +=  Aq1 + Aq2;

        }
      }
    }
    //	}//for k ()


}

}

//Ref1 + unrolling
kernel void ellipticAxHex3D_Ref2D2(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){
    shared datafloat s_tmps[p_Ngll][p_Ngll][p_Ngll];
    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt[p_Ngll], r_tmpt[p_Ngll];



    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){
            Aq[base + k*p_Ngll*p_Ngll] = 0.f;
          }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);



    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k) {
            datafloat qtk = 0.f;
            int emap = e;
            int base = i + j*p_Ngll + emap*p_Np;
            for(int n=0; n<p_Ngll; ++n) {
              qtk += s_D[k][n]*q[base + n*p_Ngll*p_Ngll];
              //   qtk += s_D[j][n]*s_q[n][j][i];
            }
            r_qt[k] = qtk;
            //	s_Aq[k][j][i] =qtk;
          }
      }
    }

    barrier(localMemFence);

    // process k-slice (first r- and s-derivatives)
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k) {
            int emap = e;
            int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            datafloat G00 = ggeo[base+p_G00ID*p_Np];
            datafloat G01 = ggeo[base+p_G01ID*p_Np];
            datafloat G02 = ggeo[base+p_G02ID*p_Np];
            datafloat G11 = ggeo[base+p_G11ID*p_Np];
            datafloat G12 = ggeo[base+p_G12ID*p_Np];
            datafloat G22 = ggeo[base+p_G22ID*p_Np];
            datafloat GwJ = ggeo[base+p_GWJID*p_Np];


            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            datafloat qr = 0.f, qs = 0.f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {

                qr += s_D[i][n]*q[n + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np];
                qs += s_D[j][n]*q[i + n*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
              }
            base = i + j*p_Ngll + emap*p_Np;
            // assumes w*J built into G entries
            //	s_tmpr[k][j][i] = G00*qr + G01*qs + G02*r_qt[k];

            Aqtemp[base + k*p_Ngll*p_Ngll] = G00*qr + G01*qs + G02*r_qt[k];
            s_tmps[k][j][i] = G01*qr + G11*qs + G12*r_qt[k];
            r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt[k];


            //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




            Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            for(int n=0; n<p_Ngll; ++n) {
              //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
              Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
            }
          }
      }
    }


    barrier(localMemFence);

    // second derivatives

    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        for(int k=0; k<p_Ngll; ++k) {

          int emap = e;

          int base = i + j*p_Ngll + emap*p_Np;
          datafloat Aq1 = 0.0f, Aq2 = 0.0f;

          for(int n=0; n<p_Ngll; ++n) {
            Aq1 += s_D[n][i]*Aqtemp[k*p_Ngll*p_Ngll + j*p_Ngll + emap*p_Np +n];
            //s_tmpr[k][j][n];
            Aq2 += s_D[n][j]*s_tmps[k][n][i];
          }

          Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

          //		s_Aq[k][j][i] +=  Aq1 + Aq2;

        }
      }
    }
    //	}//for k ()

}
} //e1c


//Ref1 + unrolling + k as external loop
kernel void ellipticAxHex3D_Ref2D4(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    //	shared datafloat s_tmpr[p_Ngll][p_Ngll][p_Ngll];
    shared datafloat s_tmps[p_Ngll][p_Ngll][p_Ngll];

    //	shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt[p_Ngll], r_tmpt[p_Ngll];

    //		exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            //		s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];
            Aq[base + k*p_Ngll*p_Ngll] = 0.f;
          }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);



    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k) {
            datafloat qtk = 0.f;
            int emap = e;
            int base = i + j*p_Ngll + emap*p_Np;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                qtk += s_D[k][n]*q[base + n*p_Ngll*p_Ngll];
                //   qtk += s_D[j][n]*s_q[n][j][i];
              }
            r_qt[k] = qtk;
            //	s_Aq[k][j][i] =qtk;
          }
      }
    }

    barrier(localMemFence);
    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {
        // process k-slice (first r- and s-derivatives)
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;
            int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const datafloat G00 = ggeo[base+p_G00ID*p_Np];
            const datafloat G01 = ggeo[base+p_G01ID*p_Np];
            const datafloat G02 = ggeo[base+p_G02ID*p_Np];
            const datafloat G11 = ggeo[base+p_G11ID*p_Np];
            const datafloat G12 = ggeo[base+p_G12ID*p_Np];
            const datafloat G22 = ggeo[base+p_G22ID*p_Np];
            const datafloat GwJ = ggeo[base+p_GWJID*p_Np];


            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            datafloat qr = 0.f, qs = 0.f;
            for(int n=0; n<p_Ngll; ++n) {

              qr += s_D[i][n]*q[n + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np];
              qs += s_D[j][n]*q[i + n*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            }
            base = i + j*p_Ngll + emap*p_Np;
            // assumes w*J built into G entries
            //	s_tmpr[k][j][i] = G00*qr + G01*qs + G02*r_qt[k];

            Aqtemp[base + k*p_Ngll*p_Ngll] = G00*qr + G01*qs + G02*r_qt[k];
            s_tmps[k][j][i] = G01*qr + G11*qs + G12*r_qt[k];
            r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt[k];


            //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




            Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
                Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
              }
          }
        }
      }


    barrier(localMemFence);

    // second derivatives
    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;

            int base = i + j*p_Ngll + emap*p_Np;
            datafloat Aq1 = 0.0f, Aq2 = 0.0f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*Aqtemp[k*p_Ngll*p_Ngll + j*p_Ngll + emap*p_Np +n];
                //s_tmpr[k][j][n];
                Aq2 += s_D[n][j]*s_tmps[k][n][i];
              }

            Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

            //		s_Aq[k][j][i] +=  Aq1 + Aq2;

          }
        }
      }
    //	}//for k ()


}

} //e1c

//Ref4 - stmpr and stmps as 2D shared

kernel void ellipticAxHex3D_Ref2D5(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    shared datafloat s_tmpr[p_Ngll][p_Ngll];
    shared datafloat s_tmps[p_Ngll][p_Ngll];

    //	shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt[p_Ngll], r_tmpt[p_Ngll];

    //		exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            //		s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];
            Aq[base + k*p_Ngll*p_Ngll] = 0.f;
          }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);



    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k) {
            datafloat qtk = 0.f;
            int emap = e;
            int base = i + j*p_Ngll + emap*p_Np;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                qtk += s_D[k][n]*q[base + n*p_Ngll*p_Ngll];
                //   qtk += s_D[j][n]*s_q[n][j][i];
              }
            r_qt[k] = qtk;
            //	s_Aq[k][j][i] =qtk;
          }
      }
    }

    	barrier(localMemFence);
    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {
        // process k-slice (first r- and s-derivatives)
        barrier(localMemFence);
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;
            int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const datafloat G00 = ggeo[base+p_G00ID*p_Np];
            const datafloat G01 = ggeo[base+p_G01ID*p_Np];
            const datafloat G02 = ggeo[base+p_G02ID*p_Np];
            const datafloat G11 = ggeo[base+p_G11ID*p_Np];
            const datafloat G12 = ggeo[base+p_G12ID*p_Np];
            const datafloat G22 = ggeo[base+p_G22ID*p_Np];
            const datafloat GwJ = ggeo[base+p_GWJID*p_Np];


            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            datafloat qr = 0.f, qs = 0.f;
            for(int n=0; n<p_Ngll; ++n) {

              qr += s_D[i][n]*q[n + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np];
              qs += s_D[j][n]*q[i + n*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            }
            base = i + j*p_Ngll + emap*p_Np;
            // assumes w*J built into G entries


            s_tmpr[j][i] = G00*qr + G01*qs + G02*r_qt[k];
            s_tmps[j][i] = G01*qr + G11*qs + G12*r_qt[k];
            r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt[k];


            //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




            Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
                Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
              }
          }
        }



        barrier(localMemFence);

        // second derivatives

        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;

            int base = i + j*p_Ngll + emap*p_Np;
            datafloat Aq1 = 0.0f, Aq2 = 0.0f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*s_tmpr[j][n];
                Aq2 += s_D[n][j]*s_tmps[n][i];
              }

            Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

            //		s_Aq[k][j][i] +=  Aq1 + Aq2;

          }
        }
      }
    //	}//for k ()


}

} //e1c

//Ref5 -- q in shared

kernel void ellipticAxHex3D_Ref2D6(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    shared datafloat s_tmpr[p_Ngll][p_Ngll];
    shared datafloat s_tmps[p_Ngll][p_Ngll];

    shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt, r_tmpt[p_Ngll];

    //		exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {
        int emap = e;
        int base = i + j*p_Ngll + emap*p_Np;
        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];
            Aq[base + k*p_Ngll*p_Ngll] = 0.f;
          }

        s_D[j][i] = D[j*p_Ngll+i];

      }
    }

    barrier(localMemFence);


    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            datafloat qtk = 0.f;
            int emap = e;
            int base = i + j*p_Ngll + emap*p_Np;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                qtk += s_D[k][n]*s_q[n][j][i];
                //   qtk += s_D[j][n]*s_q[n][j][i];
              }
            r_qt = qtk;
            //	s_Aq[k][j][i] =qtk;
          }

        }

 barrier(localMemFence);
       
        // process k-slice (first r- and s-derivatives)
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;
            int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const datafloat G00 = ggeo[base+p_G00ID*p_Np];
            const datafloat G01 = ggeo[base+p_G01ID*p_Np];
            const datafloat G02 = ggeo[base+p_G02ID*p_Np];
            const datafloat G11 = ggeo[base+p_G11ID*p_Np];
            const datafloat G12 = ggeo[base+p_G12ID*p_Np];
            const datafloat G22 = ggeo[base+p_G22ID*p_Np];
            const datafloat GwJ = ggeo[base+p_GWJID*p_Np];


            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            datafloat qr = 0.f, qs = 0.f;
            for(int n=0; n<p_Ngll; ++n) {

              qr += s_D[i][n]*s_q[k][j][n];
              qs += s_D[j][n]*s_q[k][n][i];
            }
            base = i + j*p_Ngll + emap*p_Np;
            // assumes w*J built into G entries


            s_tmpr[j][i] = G00*qr + G01*qs + G02*r_qt;
            s_tmps[j][i] = G01*qr + G11*qs + G12*r_qt;
            r_tmpt[k]           = G02*qr + G12*qs + G22*r_qt;


            //	s_Aq[k][j][i] += GwJ*lambda*s_q[k][j][i];




            Aq[base + k*p_Ngll*p_Ngll] += GwJ*lambda*q[i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np ];
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                //s_Aq[n][j][i] += s_D[k][n]*r_tmpt[k];
                Aq[base + n*p_Ngll*p_Ngll] +=s_D[k][n]*r_tmpt[k];
              }
          }
        }



        barrier(localMemFence);

        // second derivatives

        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            int emap = e;

            int base = i + j*p_Ngll + emap*p_Np;
            datafloat Aq1 = 0.0f, Aq2 = 0.0f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*s_tmpr[j][n];
                //s_tmpr[k][j][n];
                Aq2 += s_D[n][j]*s_tmps[n][i];
              }

            Aq[base + k*p_Ngll*p_Ngll] +=  Aq1 + Aq2;

            //		s_Aq[k][j][i] +=  Aq1 + Aq2;

          }
        }
      }
    //	}//for k ()


}

} //e1c

//eliminate global storage

//eliminate global storage
kernel void ellipticAxHex3D_Ref2D7(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    shared datafloat s_tmpr[p_Ngll][p_Ngll];
    shared datafloat s_tmps[p_Ngll][p_Ngll];

    shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll];

    exclusive datafloat  r_qt, r_tmpq[p_Ngll];

    exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        emap=e;

        const int base = i + j*p_Ngll + emap*p_Np;

        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];

          }

        s_D[j][i] = D[j*p_Ngll+i];


        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k)
            r_tmpq[k] =0.0f;
      }
    }

    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {

        barrier(localMemFence);

        // process k-slice (first r- and s-derivatives)
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {

            datafloat qr = 0.f, qs = 0.f, qt = 0.f;
            for(int n=0; n<p_Ngll; ++n) {
              qr += s_D[i][n]*s_q[k][j][n];
              qs += s_D[j][n]*s_q[k][n][i];
              qt += s_D[k][n]*s_q[n][j][i];
            }//for

            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            const int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const datafloat G00 = ggeo[base+p_G00ID*p_Np];
            const datafloat G01 = ggeo[base+p_G01ID*p_Np];
            const datafloat G02 = ggeo[base+p_G02ID*p_Np];
            const datafloat G11 = ggeo[base+p_G11ID*p_Np];
            const datafloat G12 = ggeo[base+p_G12ID*p_Np];
            const datafloat G22 = ggeo[base+p_G22ID*p_Np];
            const datafloat GwJ = ggeo[base+p_GWJID*p_Np];

            s_tmpr[j][i] = G00*qr + G01*qs + G02*qt;
            s_tmps[j][i] = G01*qr + G11*qs + G12*qt;
            r_qt         = G02*qr + G12*qs + G22*qt;

            r_tmpq[k] += lambda*GwJ*s_q[k][j][i];

          }//for
        }//for

        barrier(localMemFence);

        // second derivatives

        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {

            datafloat Aq1 = 0.0f, Aq2 = 0.0f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*s_tmpr[j][n];
                Aq2 += s_D[n][j]*s_tmps[n][i];
                r_tmpq[n] += s_D[k][n]*r_qt;
              }
            r_tmpq[k] += Aq1 + Aq2;
          }
        }
      }

    // write result out (local node storage)
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        for (int k=0; k<p_Ngll; k++){
          int base = emap*p_Np +k*p_Ngll*p_Ngll+ j*p_Ngll + i;

          Aq[base] = r_tmpq[k];
        }
      }
    }
  }

} //e1c


//same as in Ref6 BUT WITH PADDING

kernel void ellipticAxHex3D_Ref2D8(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){

    shared datafloat s_tmpr[p_Ngll][p_Ngll+p_gllPad];
    shared datafloat s_tmps[p_Ngll][p_Ngll+p_gllPad];

    shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll+p_gllPad];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll+p_gllPad];

    exclusive datafloat  r_qt, r_tmpq[p_Ngll];

    exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        emap=e;

        const int base = i + j*p_Ngll + emap*p_Np;

        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];

          }

        s_D[j][i] = D[j*p_Ngll+i];


        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k)
            r_tmpq[k] =0.0f;
      }
    }

    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {

        barrier(localMemFence);

        // process k-slice (first r- and s-derivatives)
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {

            datafloat qr = 0.f, qs = 0.f, qt = 0.f;
            for(int n=0; n<p_Ngll; ++n) {
              qr += s_D[i][n]*s_q[k][j][n];
              qs += s_D[j][n]*s_q[k][n][i];
              qt += s_D[k][n]*s_q[n][j][i];
            }//for

            //		(k,j,i) -> i + j*p_Ngll + k*p_Ngll*p_Ngll+emap*p_Np
            const int base = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const datafloat G00 = ggeo[base+p_G00ID*p_Np];
            const datafloat G01 = ggeo[base+p_G01ID*p_Np];
            const datafloat G02 = ggeo[base+p_G02ID*p_Np];
            const datafloat G11 = ggeo[base+p_G11ID*p_Np];
            const datafloat G12 = ggeo[base+p_G12ID*p_Np];
            const datafloat G22 = ggeo[base+p_G22ID*p_Np];
            const datafloat GwJ = ggeo[base+p_GWJID*p_Np];

            s_tmpr[j][i] = G00*qr + G01*qs + G02*qt;
            s_tmps[j][i] = G01*qr + G11*qs + G12*qt;
            r_qt         = G02*qr + G12*qs + G22*qt;

            r_tmpq[k] += lambda*GwJ*s_q[k][j][i];

          }//for
        }//for

        barrier(localMemFence);

        // second derivatives

        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {

            datafloat Aq1 = 0.0f, Aq2 = 0.0f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*s_tmpr[j][n];
                Aq2 += s_D[n][j]*s_tmps[n][i];
                r_tmpq[n] += s_D[k][n]*r_qt;
              }
            r_tmpq[k] += Aq1 + Aq2;
          }
        }
      }

    // write result out (local node storage)
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        for (int k=0; k<p_Ngll; k++){
          int base = emap*p_Np +k*p_Ngll*p_Ngll+ j*p_Ngll + i;

          Aq[base] = r_tmpq[k];
        }
      }
    }
  }

} //e1c


// add padding, and fetch pieces of q to registers


kernel void ellipticAxHex3D_Ref2D9(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){

  for(int e=0; e<Nelements; ++e; outer0){
    exclusive datafloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ, r_qt, r_tmpt;
    shared datafloat s_tmpr[p_Ngll][p_Ngll+p_gllPad];
    shared datafloat s_tmps[p_Ngll][p_Ngll+p_gllPad];

    shared datafloat s_q[p_Ngll][p_Ngll][p_Ngll+p_gllPad];
    //	shared datafloat s_Aq[p_Ngll][p_Ngll][p_Ngll];

    shared datafloat s_D[p_Ngll][p_Ngll+p_gllPad];

    exclusive datafloat   r_q[p_Ngll],  r_Aq[p_Ngll];

    exclusive int emap;

    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        emap=e;

        const int base = i + j*p_Ngll + emap*p_Np;

        occaUnroll(p_Ngll)
          for (int k=0; k<p_Ngll; k++){

            s_q[k][j][i] = q[base + k*p_Ngll*p_Ngll];

          }

        s_D[j][i] = D[j*p_Ngll+i];



      }
    }

 barrier(localMemFence);
    // prefetch q(i,j,:,e) to register array
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        emap = e;

        const int base = i + j*p_Ngll + emap*p_Np;

        occaUnroll(p_Ngll)
          for(int k=0; k<p_Ngll; ++k) {
            r_q[k] = s_q[k][j][i];
            r_Aq[k] = 0.f;
          }


      }
    }

    barrier(localMemFence);
    occaUnroll(p_Ngll)
      for(int k=0; k<p_Ngll; ++k) {
        barrier(localMemFence);
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {

            const int gbase = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];
            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];
            r_GwJ = ggeo[gbase+p_GWJID*p_Np];

            // share k-slice of q
            //		s_q[k][j][i] = r_q[k];

            // hide shared latency behind t-derivative
            datafloat qtk = 0.f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                qtk += s_D[k][n]*r_q[n];
              }
            r_qt = qtk;
          }
        }

        barrier(localMemFence);

        // process k-slice (first r- and s-derivatives)
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {


            datafloat qr = 0.f, qs = 0.f;
            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                qr += s_D[i][n]*s_q[k][j][n];
                qs += s_D[j][n]*s_q[k][n][i];
              }

            // assumes w*J built into r_G entries
            s_tmpr[j][i] = r_G00*qr + r_G01*qs + r_G02*r_qt;
            s_tmps[j][i] = r_G01*qr + r_G11*qs + r_G12*r_qt;
            r_tmpt           = r_G02*qr + r_G12*qs + r_G22*r_qt;

            r_Aq[k] += r_GwJ*lambda*r_q[k];

            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                r_Aq[n] += s_D[k][n]*r_tmpt;
              }
          }
        }

        barrier(localMemFence);

        // second derivatives
        for(int j=0; j<p_Ngll; ++j; inner1) {
          for(int i=0; i<p_Ngll; ++i; inner0) {
            datafloat Aq1 = 0.0f, Aq2 = 0.0f;

            occaUnroll(p_Ngll)
              for(int n=0; n<p_Ngll; ++n) {
                Aq1 += s_D[n][i]*s_tmpr[j][n];
                Aq2 += s_D[n][j]*s_tmps[n][i];
              }

            r_Aq[k] +=  Aq1 + Aq2;
          }
        }
      }
    for(int j=0; j<p_Ngll; ++j; inner1) {
      for(int i=0; i<p_Ngll; ++i; inner0) {

        for (int k=0; k<p_Ngll; k++){
          int base = emap*p_Np +k*p_Ngll*p_Ngll+ j*p_Ngll + i;

          Aq[base] = r_Aq[k];
        }
      }
    }

  }//e

} //e1c


//very optimized version from tcew/CEEDBP3

kernel void ellipticAxHex3D_Ref2D10(const int Nelements,
    const datafloat * restrict ggeo,
    const datafloat * restrict D,
    const datafloat lambda,
    const datafloat * restrict q,
    datafloat * restrict Aq,
    datafloat * restrict Aqtemp){


  for(int e=0; e<Nelements; ++e; outer0){
    exclusive int emap;
    shared datafloat s_D[p_Ngll][p_Ngll+p_gllPad];
    shared datafloat s_u[p_Ngll][p_Ngll+p_gllPad];
    shared datafloat s_v[p_Ngll][p_Ngll+p_gllPad];
    shared datafloat s_w[p_Ngll][p_Ngll+p_gllPad];

    exclusive datafloat r_ut, r_GDut, r_Auk;
    datafloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;


    exclusive datafloat r_u[p_Ngll]; // register array to hold u(i,j,0:N) private to thread
    exclusive datafloat r_Au[p_Ngll];// array for results Au(i,j,0:N)

    // array of threads
    for(int j=0;j<p_Ngll;++j;inner1){
      for(int i=0;i<p_Ngll;++i;inner0){
        emap=e;
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Ngll*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Ngll + emap*p_Np;
        for(int k = 0; k < p_Ngll; k++) {
          //	unsigned int id = e*BSIZE+k*p_Ngll*p_Ngll+j*p_Ngll+i;




          r_u[k] = q[base + k*p_Ngll*p_Ngll]; // prefetch operation

          r_Au[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
    occaUnroll(p_Ngll)
      for(int k = 0;k < p_Ngll; k++){

        for(int j=0;j<p_Ngll;++j;inner1){
          for(int i=0;i<p_Ngll;++i;inner0){

            // prefetch geometric factors
            //	int id = e*Ngeo*BSIZE + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            const int gbase = emap*p_Ngeo*p_Np + k*p_Ngll*p_Ngll + j*p_Ngll + i;

            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];
            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];
            r_GwJ = ggeo[gbase+p_GWJID*p_Np];
          }
        }

        barrier(localMemFence);

        for(int j=0;j<p_Ngll;++j;inner1){
          for(int i=0;i<p_Ngll;++i;inner0){

            // share u(:,:,k)
            s_u[j][i] = r_u[k];

            r_ut = 0;
            occaUnroll(p_Ngll)
              for(int m = 0; m < p_Ngll; m++) {
                r_ut += s_D[k][m]*r_u[m];
              }
          }
        }

        barrier(localMemFence);

        for(int j=0;j<p_Ngll;++j;inner1){
          for(int i=0;i<p_Ngll;++i;inner0){

            datafloat ur = 0.f;
            datafloat us = 0.f;

            occaUnroll(p_Ngll)
              for(int m = 0; m < p_Ngll; m++) {
                ur += s_D[i][m]*s_u[j][m];
                us += s_D[j][m]*s_u[m][i];
              }

            s_w[j][i] = (r_G01*ur + r_G11*us + r_G12*r_ut);
            s_v[j][i] = (r_G00*ur + r_G01*us + r_G02*r_ut);

            // put this here for a performance bump
            r_GDut = (r_G02*ur + r_G12*us + r_G22*r_ut);

            r_Auk = r_GwJ*lambda*r_u[k];
          }
        }

        barrier(localMemFence);

        for(int j=0;j<p_Ngll;++j;inner1){
          for(int i=0;i<p_Ngll;++i;inner0){


            occaUnroll(p_Ngll)
              for(int m = 0; m < p_Ngll; m++){
                r_Auk   += s_D[m][j]*s_w[m][i];
                r_Au[m] += s_D[k][m]*r_GDut; // DT(m,k)*ut(i,j,k,e)
                r_Auk   += s_D[m][i]*s_v[j][m];
              }

            r_Au[k] += r_Auk;
          }
        }
      }

    // write out

    for(int j=0;j<p_Ngll;++j;inner1){
      for(int i=0;i<p_Ngll;++i;inner0){
        occaUnroll(p_Ngll)
          for(int k = 0; k < p_Ngll; k++){
            int id = emap*p_Np +k*p_Ngll*p_Ngll+ j*p_Ngll + i;
            Aq[id] = r_Au[k];
          }
      }
    }
  }
}
